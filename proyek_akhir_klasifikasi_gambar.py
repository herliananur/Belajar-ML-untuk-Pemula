# -*- coding: utf-8 -*-
"""Proyek_Akhir-Klasifikasi_Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x5ddC0QdlodfLJOtvA6zAuOLuj5TY4Sn

**Herliana Nur Ekawati**

**NIM 11201038**

**Grup M07**

# Mengunduh Dataset yang telah disediakan (rockpaperscissors)
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop

!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip\
-O /tmp/rockpaperscissors.zip

"""Melakukan ekstraksi pada file zip"""

import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""Membuat folder untuk gambar rock, paper, dan scissors"""

folder_rock = os.path.join('/tmp/rockpaperscissors/rock')
folder_paper = os.path.join('/tmp/rockpaperscissors/paper')
folder_scissors = os.path.join('/tmp/rockpaperscissors/scissors')

img_rock = os.listdir(folder_rock)
img_paper = os.listdir(folder_paper)
img_scissors = os.listdir(folder_scissors)

"""# Menggunakan image generator

Augmentasi gambar dan membuat data training dan data validation
"""

base_dir = '/tmp/rockpaperscissors/rps-cv-images/'
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split=0.4)

"""Memberi label data"""

train_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size=(150, 150),
        shuffle=True,
        subset='training')
 
validation_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size=(150, 150),
        shuffle=True,
        subset='validation')

"""# Model Sequential"""

model = tf.keras.models.Sequential([                                                                                 
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),   
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),   
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),   
    tf.keras.layers.Flatten(),  
    tf.keras.layers.Dense(512, activation='relu'),   
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

"""Compile model yang telah dibuat"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>0.9999):
      print("Training dihentikan karena akurasi telah mencapai 99,99%")
      self.model.stop_training = True

callbacks = myCallback()

"""Melatih model yang telah dibuat"""

history = model.fit(
      train_generator,
      steps_per_epoch=30,
      epochs=20,
      validation_data=validation_generator,
      validation_steps=5,
      verbose=2,
      callbacks=[callbacks])

"""Akurasi training dan validation dari model yang telah dibuat"""

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.title('Akurasi Training dan Validation')
plt.plot(epochs, acc, 'r', label='Training')
plt.plot(epochs, val_acc, 'b', label='Validation')
plt.legend(loc=0)
plt.figure()
plt.show()

epochs = range(len(loss))

plt.title('Akurasi Loss dan Validation Loss')
plt.plot(epochs, loss, 'g', label='Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.legend(loc=0)
plt.figure()
plt.show()

"""# Memprediksi Gambar"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)  

  print(fn)
  if classes[0][0]==1:
    print('Paper')                                                        
  elif classes[0][1]==1:
    print('Rock')                                                          
  elif classes[0][2]==1:
    print('Scissors')  
  else:
    print('Unknown')